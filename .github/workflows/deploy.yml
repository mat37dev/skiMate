name: CI PIPELINE

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build containers
        run: docker compose build

      - name: Start containers
        run: docker compose up -d

      - name: Wait for MySQL to be ready
        run: sleep 20

      - name: Install Composer dependencies
        run: |
          docker compose run --rm \
            -e APP_ENV=test \
            php_skimate composer install \
            --no-ansi --no-interaction --no-progress --prefer-dist

      - name: List files in Symfony app
        run: docker compose exec -T php_skimate ls -la /var/www/symfony

      - name: Check migrations directory
        run: docker compose exec -T php_skimate ls -la /var/www/symfony/migrations

      - name: Generate JWT keys
        run: |
          docker compose exec -T php_skimate sh -c "
            mkdir -p config/jwt &&
            openssl genrsa -out config/jwt/private.pem 4096 &&
            openssl rsa -pubout -in config/jwt/private.pem -out config/jwt/public.pem
          "

      - name: Prepare test DB
        run: |
          docker compose exec -T php_skimate php bin/console doctrine:database:create --env=test
          docker compose exec -T php_skimate php bin/console doctrine:migrations:migrate --env=test --no-interaction
          docker compose exec -T php_skimate php bin/console doctrine:fixtures:load --env=test --no-interaction

      - name: Run PHPUnit tests
        env:
          APP_ENV: test
        run: docker compose exec -T php_skimate php ./vendor/bin/phpunit

      - name: Stop containers
        if: always()
        run: docker compose down -v

  sonar:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      SONAR_HOST_URL: "http://localhost:9001"
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # on rebuild uniquement le scanner
      - name: Build scanner container
        run: docker compose \
          -f docker-compose.yml \
          -f sonarqube/docker-compose.yml \
          build sonar-scannercicd

      - name: Run SonarQube analysis
        run: |
          docker compose \
            -f docker-compose.yml \
            -f sonarqube/docker-compose.yml \
            run --rm sonar-scannercicd \
              sonar-scanner \
                -Dsonar.host.url=${SONAR_HOST_URL} \
                -Dsonar.login=${SONAR_TOKEN} \
                -Dsonar.projectKey=skimate \
                -Dsonar.sources=src \
                -Dsonar.tests=tests \
                -Dsonar.php.coverage.reportPaths=coverage.xml