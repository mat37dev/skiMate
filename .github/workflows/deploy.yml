name: CI PIPELINE

on:
    push:
        branches: ["dev"]
    pull_request:
        branches: ["dev"]

jobs:
    build-and-test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Copy env test file
              run: cp .env.test.ci

            - name: Build containers
              run: docker compose -f docker-compose.yaml build

            - name: Start containers
              run: docker compose up -d

            - name: Wait for MySQL to be ready
              run: sleep 20

            - name: Install Composer dependencies
              run: |
                  docker compose run --rm php_skimate composer install \
                    --no-ansi --no-interaction --no-progress --prefer-dist

            - name: Generate JWT keys
              run: |
                  docker compose exec -T php_skimate sh -c "
                    mkdir -p config/jwt &&
                    openssl genrsa -out config/jwt/private.pem -aes256 -passout pass:${{ secrets.JWT_PASSPHRASE }} 4096 &&
                    openssl rsa -pubout -in config/jwt/private.pem -out config/jwt/public.pem -passin pass:${{ secrets.JWT_PASSPHRASE }}
                  "

            - name: Prepare test DB
              run: |
                  docker compose exec -T php_skimate php bin/console doctrine:database:create --env=test
                  docker compose exec -T php_skimate php bin/console doctrine:migrations:migrate --env=test --no-interaction
                  docker compose exec -T php_skimate php bin/console doctrine:fixtures:load --env=test --no-interaction

            - name: Run PHPUnit tests
              env:
                  JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
              run: docker compose exec -T php_skimate php ./vendor/bin/phpunit --env=test --coverage-clover=coverage.xml

            - name: Stop containers
              if: always()
              run: docker compose down -v
